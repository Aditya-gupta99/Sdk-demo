// Generated by Ktorfit
@file:Suppress("warnings")

package org.openapitools.client.apis

import de.jensklingenberg.ktorfit.Ktorfit
import de.jensklingenberg.ktorfit.`internal`.InternalKtorfitApi
import de.jensklingenberg.ktorfit.`internal`.KtorfitConverterHelper
import de.jensklingenberg.ktorfit.`internal`.KtorfitInterface
import de.jensklingenberg.ktorfit.`internal`.TypeData
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.headers
import io.ktor.client.request.parameter
import io.ktor.client.request.setBody
import io.ktor.http.HttpMethod
import io.ktor.http.URLBuilder
import io.ktor.http.decodeURLQueryComponent
import io.ktor.http.encodeURLPath
import io.ktor.http.takeFrom
import io.ktor.util.reflect.typeInfo
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import org.openapitools.client.models.ExternalServicesPropertiesData
import org.openapitools.client.models.PutExternalServiceRequest

@OptIn(InternalKtorfitApi::class)
public class _ExternalServicesApiImpl : ExternalServicesApi, KtorfitInterface {
  override lateinit var _converter: KtorfitConverterHelper

  override suspend fun retrieveOne2(servicename: String): ExternalServicesPropertiesData {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_converter.baseUrl + "v1/externalservice/${"$servicename".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "org.openapitools.client.models.ExternalServicesPropertiesData",
    typeInfo = typeInfo<org.openapitools.client.models.ExternalServicesPropertiesData>())

    return _converter.suspendRequest<org.openapitools.client.models.ExternalServicesPropertiesData,
        org.openapitools.client.models.ExternalServicesPropertiesData>(_typeData,_ext)!!
  }

  override suspend fun updateExternalServiceProperties(servicename: String,
      putExternalServiceRequest: PutExternalServiceRequest) {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("PUT")
        url{
        takeFrom(_converter.baseUrl + "v1/externalservice/${"$servicename".encodeURLPath()}")
        }
        setBody(putExternalServiceRequest) 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "kotlin.Unit",
    typeInfo = typeInfo<kotlin.Unit>())

    return _converter.suspendRequest<kotlin.Unit, kotlin.Unit>(_typeData,_ext)!!
  }
}

public fun Ktorfit.createExternalServicesApi(): ExternalServicesApi =
    this.create(_ExternalServicesApiImpl().apply { _converter=
    KtorfitConverterHelper(this@createExternalServicesApi) })
