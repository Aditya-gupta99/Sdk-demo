// Generated by Ktorfit
@file:Suppress("warnings")

package org.openapitools.client.apis

import de.jensklingenberg.ktorfit.Ktorfit
import de.jensklingenberg.ktorfit.`internal`.InternalKtorfitApi
import de.jensklingenberg.ktorfit.`internal`.KtorfitConverterHelper
import de.jensklingenberg.ktorfit.`internal`.KtorfitInterface
import de.jensklingenberg.ktorfit.`internal`.TypeData
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.headers
import io.ktor.client.request.parameter
import io.ktor.client.request.setBody
import io.ktor.http.HttpMethod
import io.ktor.http.URLBuilder
import io.ktor.http.decodeURLQueryComponent
import io.ktor.http.encodeURLPath
import io.ktor.http.takeFrom
import io.ktor.util.reflect.typeInfo
import kotlin.OptIn
import kotlin.Suppress
import kotlin.collections.List
import org.openapitools.client.models.CommandProcessingResult
import org.openapitools.client.models.GetPermissionsResponse
import org.openapitools.client.models.PutPermissionsRequest

@OptIn(InternalKtorfitApi::class)
public class _PermissionsApiImpl : PermissionsApi, KtorfitInterface {
  override lateinit var _converter: KtorfitConverterHelper

  override suspend fun retrieveAllPermissions(): List<GetPermissionsResponse> {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_converter.baseUrl + "v1/permissions")
        } 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename =
        "kotlin.collections.List<org.openapitools.client.models.GetPermissionsResponse>",
    typeInfo =
        typeInfo<kotlin.collections.List<org.openapitools.client.models.GetPermissionsResponse>>())

    return _converter.suspendRequest<kotlin.collections.List<org.openapitools.client.models.GetPermissionsResponse>,
        org.openapitools.client.models.GetPermissionsResponse>(_typeData,_ext)!!
  }

  override suspend fun updatePermissionsDetails(putPermissionsRequest: PutPermissionsRequest):
      CommandProcessingResult {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("PUT")
        url{
        takeFrom(_converter.baseUrl + "v1/permissions")
        }
        setBody(putPermissionsRequest) 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "org.openapitools.client.models.CommandProcessingResult",
    typeInfo = typeInfo<org.openapitools.client.models.CommandProcessingResult>())

    return _converter.suspendRequest<org.openapitools.client.models.CommandProcessingResult,
        org.openapitools.client.models.CommandProcessingResult>(_typeData,_ext)!!
  }
}

public fun Ktorfit.createPermissionsApi(): PermissionsApi = this.create(_PermissionsApiImpl().apply
    { _converter= KtorfitConverterHelper(this@createPermissionsApi) })
