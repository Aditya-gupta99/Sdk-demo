// Generated by Ktorfit
@file:Suppress("warnings")

package org.openapitools.client.apis

import de.jensklingenberg.ktorfit.Ktorfit
import de.jensklingenberg.ktorfit.`internal`.InternalKtorfitApi
import de.jensklingenberg.ktorfit.`internal`.KtorfitConverterHelper
import de.jensklingenberg.ktorfit.`internal`.KtorfitInterface
import de.jensklingenberg.ktorfit.`internal`.TypeData
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.headers
import io.ktor.client.request.parameter
import io.ktor.client.request.setBody
import io.ktor.http.HttpMethod
import io.ktor.http.URLBuilder
import io.ktor.http.decodeURLQueryComponent
import io.ktor.http.encodeURLPath
import io.ktor.http.takeFrom
import io.ktor.util.reflect.typeInfo
import kotlin.Any
import kotlin.Long
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import org.openapitools.client.models.DeleteHolidaysHolidayIdResponse
import org.openapitools.client.models.GetHolidaysResponse
import org.openapitools.client.models.PostHolidaysHolidayIdResponse
import org.openapitools.client.models.PostHolidaysRequest
import org.openapitools.client.models.PostHolidaysResponse
import org.openapitools.client.models.PutHolidaysHolidayIdRequest
import org.openapitools.client.models.PutHolidaysHolidayIdResponse

@OptIn(InternalKtorfitApi::class)
public class _HolidaysApiImpl : HolidaysApi, KtorfitInterface {
  override lateinit var _converter: KtorfitConverterHelper

  override suspend fun createNewHoliday(postHolidaysRequest: PostHolidaysRequest):
      PostHolidaysResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_converter.baseUrl + "v1/holidays")
        }
        setBody(postHolidaysRequest) 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "org.openapitools.client.models.PostHolidaysResponse",
    typeInfo = typeInfo<org.openapitools.client.models.PostHolidaysResponse>())

    return _converter.suspendRequest<org.openapitools.client.models.PostHolidaysResponse,
        org.openapitools.client.models.PostHolidaysResponse>(_typeData,_ext)!!
  }

  override suspend fun delete7(holidayId: Long): DeleteHolidaysHolidayIdResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("DELETE")
        url{
        takeFrom(_converter.baseUrl + "v1/holidays/${"$holidayId".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "org.openapitools.client.models.DeleteHolidaysHolidayIdResponse",
    typeInfo = typeInfo<org.openapitools.client.models.DeleteHolidaysHolidayIdResponse>())

    return _converter.suspendRequest<org.openapitools.client.models.DeleteHolidaysHolidayIdResponse,
        org.openapitools.client.models.DeleteHolidaysHolidayIdResponse>(_typeData,_ext)!!
  }

  override suspend fun handleCommands1(
    holidayId: Long,
    body: Any,
    command: String?,
  ): PostHolidaysHolidayIdResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_converter.baseUrl + "v1/holidays/${"$holidayId".encodeURLPath()}")
        command?.let{ parameter("command", "$it") }
        }
        setBody(body) 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "org.openapitools.client.models.PostHolidaysHolidayIdResponse",
    typeInfo = typeInfo<org.openapitools.client.models.PostHolidaysHolidayIdResponse>())

    return _converter.suspendRequest<org.openapitools.client.models.PostHolidaysHolidayIdResponse,
        org.openapitools.client.models.PostHolidaysHolidayIdResponse>(_typeData,_ext)!!
  }

  override suspend fun retrieveAllHolidays(
    officeId: Long?,
    fromDate: Any?,
    toDate: Any?,
    locale: String?,
    dateFormat: String?,
  ): List<GetHolidaysResponse> {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_converter.baseUrl + "v1/holidays")
        officeId?.let{ parameter("officeId", "$it") }
        fromDate?.filterNotNull()?.forEach { parameter("fromDate", "$it") }
        toDate?.filterNotNull()?.forEach { parameter("toDate", "$it") }
        locale?.let{ parameter("locale", "$it") }
        dateFormat?.let{ parameter("dateFormat", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename =
        "kotlin.collections.List<org.openapitools.client.models.GetHolidaysResponse>",
    typeInfo =
        typeInfo<kotlin.collections.List<org.openapitools.client.models.GetHolidaysResponse>>())

    return _converter.suspendRequest<kotlin.collections.List<org.openapitools.client.models.GetHolidaysResponse>,
        org.openapitools.client.models.GetHolidaysResponse>(_typeData,_ext)!!
  }

  override suspend fun retrieveOne7(holidayId: Long): GetHolidaysResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_converter.baseUrl + "v1/holidays/${"$holidayId".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "org.openapitools.client.models.GetHolidaysResponse",
    typeInfo = typeInfo<org.openapitools.client.models.GetHolidaysResponse>())

    return _converter.suspendRequest<org.openapitools.client.models.GetHolidaysResponse,
        org.openapitools.client.models.GetHolidaysResponse>(_typeData,_ext)!!
  }

  override suspend fun retrieveRepaymentScheduleUpdationTyeOptions(): String {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_converter.baseUrl + "v1/holidays/template")
        } 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "kotlin.String",
    typeInfo = typeInfo<kotlin.String>())

    return _converter.suspendRequest<kotlin.String, kotlin.String>(_typeData,_ext)!!
  }

  override suspend fun update6(holidayId: Long,
      putHolidaysHolidayIdRequest: PutHolidaysHolidayIdRequest): PutHolidaysHolidayIdResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("PUT")
        url{
        takeFrom(_converter.baseUrl + "v1/holidays/${"$holidayId".encodeURLPath()}")
        }
        setBody(putHolidaysHolidayIdRequest) 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "org.openapitools.client.models.PutHolidaysHolidayIdResponse",
    typeInfo = typeInfo<org.openapitools.client.models.PutHolidaysHolidayIdResponse>())

    return _converter.suspendRequest<org.openapitools.client.models.PutHolidaysHolidayIdResponse,
        org.openapitools.client.models.PutHolidaysHolidayIdResponse>(_typeData,_ext)!!
  }
}

public fun Ktorfit.createHolidaysApi(): HolidaysApi = this.create(_HolidaysApiImpl().apply {
    _converter= KtorfitConverterHelper(this@createHolidaysApi) })
