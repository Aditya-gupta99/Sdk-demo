// Generated by Ktorfit
@file:Suppress("warnings")

package org.openapitools.client.apis

import de.jensklingenberg.ktorfit.Ktorfit
import de.jensklingenberg.ktorfit.`internal`.InternalKtorfitApi
import de.jensklingenberg.ktorfit.`internal`.KtorfitConverterHelper
import de.jensklingenberg.ktorfit.`internal`.KtorfitInterface
import de.jensklingenberg.ktorfit.`internal`.TypeData
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.headers
import io.ktor.client.request.parameter
import io.ktor.client.request.setBody
import io.ktor.http.HttpMethod
import io.ktor.http.URLBuilder
import io.ktor.http.decodeURLQueryComponent
import io.ktor.http.encodeURLPath
import io.ktor.http.takeFrom
import io.ktor.util.reflect.typeInfo
import kotlin.Long
import kotlin.OptIn
import kotlin.Suppress
import kotlin.collections.List
import org.openapitools.client.models.DeleteCodesResponse
import org.openapitools.client.models.GetCodesResponse
import org.openapitools.client.models.PostCodesRequest
import org.openapitools.client.models.PostCodesResponse
import org.openapitools.client.models.PutCodesRequest
import org.openapitools.client.models.PutCodesResponse

@OptIn(InternalKtorfitApi::class)
public class _CodesApiImpl : CodesApi, KtorfitInterface {
  override lateinit var _converter: KtorfitConverterHelper

  override suspend fun createCode(postCodesRequest: PostCodesRequest): PostCodesResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_converter.baseUrl + "v1/codes")
        }
        setBody(postCodesRequest) 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "org.openapitools.client.models.PostCodesResponse",
    typeInfo = typeInfo<org.openapitools.client.models.PostCodesResponse>())

    return _converter.suspendRequest<org.openapitools.client.models.PostCodesResponse,
        org.openapitools.client.models.PostCodesResponse>(_typeData,_ext)!!
  }

  override suspend fun deleteCode(codeId: Long): DeleteCodesResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("DELETE")
        url{
        takeFrom(_converter.baseUrl + "v1/codes/${"$codeId".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "org.openapitools.client.models.DeleteCodesResponse",
    typeInfo = typeInfo<org.openapitools.client.models.DeleteCodesResponse>())

    return _converter.suspendRequest<org.openapitools.client.models.DeleteCodesResponse,
        org.openapitools.client.models.DeleteCodesResponse>(_typeData,_ext)!!
  }

  override suspend fun retrieveCode(codeId: Long): GetCodesResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_converter.baseUrl + "v1/codes/${"$codeId".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "org.openapitools.client.models.GetCodesResponse",
    typeInfo = typeInfo<org.openapitools.client.models.GetCodesResponse>())

    return _converter.suspendRequest<org.openapitools.client.models.GetCodesResponse,
        org.openapitools.client.models.GetCodesResponse>(_typeData,_ext)!!
  }

  override suspend fun retrieveCodes(): List<GetCodesResponse> {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_converter.baseUrl + "v1/codes")
        } 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "kotlin.collections.List<org.openapitools.client.models.GetCodesResponse>",
    typeInfo = typeInfo<kotlin.collections.List<org.openapitools.client.models.GetCodesResponse>>())

    return _converter.suspendRequest<kotlin.collections.List<org.openapitools.client.models.GetCodesResponse>,
        org.openapitools.client.models.GetCodesResponse>(_typeData,_ext)!!
  }

  override suspend fun updateCode(codeId: Long, putCodesRequest: PutCodesRequest):
      PutCodesResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("PUT")
        url{
        takeFrom(_converter.baseUrl + "v1/codes/${"$codeId".encodeURLPath()}")
        }
        setBody(putCodesRequest) 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "org.openapitools.client.models.PutCodesResponse",
    typeInfo = typeInfo<org.openapitools.client.models.PutCodesResponse>())

    return _converter.suspendRequest<org.openapitools.client.models.PutCodesResponse,
        org.openapitools.client.models.PutCodesResponse>(_typeData,_ext)!!
  }
}

public fun Ktorfit.createCodesApi(): CodesApi = this.create(_CodesApiImpl().apply { _converter=
    KtorfitConverterHelper(this@createCodesApi) })
