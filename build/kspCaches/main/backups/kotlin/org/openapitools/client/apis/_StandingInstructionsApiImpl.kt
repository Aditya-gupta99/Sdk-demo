// Generated by Ktorfit
@file:Suppress("warnings")

package org.openapitools.client.apis

import de.jensklingenberg.ktorfit.Ktorfit
import de.jensklingenberg.ktorfit.`internal`.InternalKtorfitApi
import de.jensklingenberg.ktorfit.`internal`.KtorfitConverterHelper
import de.jensklingenberg.ktorfit.`internal`.KtorfitInterface
import de.jensklingenberg.ktorfit.`internal`.TypeData
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.headers
import io.ktor.client.request.parameter
import io.ktor.client.request.setBody
import io.ktor.http.HttpMethod
import io.ktor.http.URLBuilder
import io.ktor.http.decodeURLQueryComponent
import io.ktor.http.encodeURLPath
import io.ktor.http.takeFrom
import io.ktor.util.reflect.typeInfo
import kotlin.Int
import kotlin.Long
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import org.openapitools.client.models.GetStandingInstructionsResponse
import org.openapitools.client.models.GetStandingInstructionsStandingInstructionIdResponse
import org.openapitools.client.models.GetStandingInstructionsTemplateResponse
import org.openapitools.client.models.PostStandingInstructionsRequest
import org.openapitools.client.models.PostStandingInstructionsResponse
import org.openapitools.client.models.PutStandingInstructionsStandingInstructionIdRequest
import org.openapitools.client.models.PutStandingInstructionsStandingInstructionIdResponse

@OptIn(InternalKtorfitApi::class)
public class _StandingInstructionsApiImpl : StandingInstructionsApi, KtorfitInterface {
  override lateinit var _converter: KtorfitConverterHelper

  override suspend fun create5(postStandingInstructionsRequest: PostStandingInstructionsRequest):
      PostStandingInstructionsResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_converter.baseUrl + "v1/standinginstructions")
        }
        setBody(postStandingInstructionsRequest) 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "org.openapitools.client.models.PostStandingInstructionsResponse",
    typeInfo = typeInfo<org.openapitools.client.models.PostStandingInstructionsResponse>())

    return _converter.suspendRequest<org.openapitools.client.models.PostStandingInstructionsResponse,
        org.openapitools.client.models.PostStandingInstructionsResponse>(_typeData,_ext)!!
  }

  override suspend fun retrieveAll19(
    externalId: String?,
    offset: Int?,
    limit: Int?,
    orderBy: String?,
    sortOrder: String?,
    transferType: Int?,
    clientName: String?,
    clientId: Long?,
    fromAccountId: Long?,
    fromAccountType: Int?,
  ): GetStandingInstructionsResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_converter.baseUrl + "v1/standinginstructions")
        externalId?.let{ parameter("externalId", "$it") }
        offset?.let{ parameter("offset", "$it") }
        limit?.let{ parameter("limit", "$it") }
        orderBy?.let{ parameter("orderBy", "$it") }
        sortOrder?.let{ parameter("sortOrder", "$it") }
        transferType?.let{ parameter("transferType", "$it") }
        clientName?.let{ parameter("clientName", "$it") }
        clientId?.let{ parameter("clientId", "$it") }
        fromAccountId?.let{ parameter("fromAccountId", "$it") }
        fromAccountType?.let{ parameter("fromAccountType", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "org.openapitools.client.models.GetStandingInstructionsResponse",
    typeInfo = typeInfo<org.openapitools.client.models.GetStandingInstructionsResponse>())

    return _converter.suspendRequest<org.openapitools.client.models.GetStandingInstructionsResponse,
        org.openapitools.client.models.GetStandingInstructionsResponse>(_typeData,_ext)!!
  }

  override suspend fun retrieveOne10(
    standingInstructionId: Long,
    externalId: String?,
    offset: Int?,
    limit: Int?,
    orderBy: String?,
    sortOrder: String?,
  ): GetStandingInstructionsStandingInstructionIdResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_converter.baseUrl +
            "v1/standinginstructions/${"$standingInstructionId".encodeURLPath()}")
        externalId?.let{ parameter("externalId", "$it") }
        offset?.let{ parameter("offset", "$it") }
        limit?.let{ parameter("limit", "$it") }
        orderBy?.let{ parameter("orderBy", "$it") }
        sortOrder?.let{ parameter("sortOrder", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename =
        "org.openapitools.client.models.GetStandingInstructionsStandingInstructionIdResponse",
    typeInfo =
        typeInfo<org.openapitools.client.models.GetStandingInstructionsStandingInstructionIdResponse>())

    return _converter.suspendRequest<org.openapitools.client.models.GetStandingInstructionsStandingInstructionIdResponse,
        org.openapitools.client.models.GetStandingInstructionsStandingInstructionIdResponse>(_typeData,_ext)!!
  }

  override suspend fun template6(
    fromOfficeId: Long?,
    fromClientId: Long?,
    fromAccountId: Long?,
    fromAccountType: Int?,
    toOfficeId: Long?,
    toClientId: Long?,
    toAccountId: Long?,
    toAccountType: Int?,
    transferType: Int?,
  ): GetStandingInstructionsTemplateResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_converter.baseUrl + "v1/standinginstructions/template")
        fromOfficeId?.let{ parameter("fromOfficeId", "$it") }
        fromClientId?.let{ parameter("fromClientId", "$it") }
        fromAccountId?.let{ parameter("fromAccountId", "$it") }
        fromAccountType?.let{ parameter("fromAccountType", "$it") }
        toOfficeId?.let{ parameter("toOfficeId", "$it") }
        toClientId?.let{ parameter("toClientId", "$it") }
        toAccountId?.let{ parameter("toAccountId", "$it") }
        toAccountType?.let{ parameter("toAccountType", "$it") }
        transferType?.let{ parameter("transferType", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "org.openapitools.client.models.GetStandingInstructionsTemplateResponse",
    typeInfo = typeInfo<org.openapitools.client.models.GetStandingInstructionsTemplateResponse>())

    return _converter.suspendRequest<org.openapitools.client.models.GetStandingInstructionsTemplateResponse,
        org.openapitools.client.models.GetStandingInstructionsTemplateResponse>(_typeData,_ext)!!
  }

  override suspend fun update9(
    standingInstructionId: Long,
    command: String?,
    putStandingInstructionsStandingInstructionIdRequest: PutStandingInstructionsStandingInstructionIdRequest?,
  ): PutStandingInstructionsStandingInstructionIdResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("PUT")
        url{
        takeFrom(_converter.baseUrl +
            "v1/standinginstructions/${"$standingInstructionId".encodeURLPath()}")
        command?.let{ parameter("command", "$it") }
        }
        setBody(putStandingInstructionsStandingInstructionIdRequest) 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename =
        "org.openapitools.client.models.PutStandingInstructionsStandingInstructionIdResponse",
    typeInfo =
        typeInfo<org.openapitools.client.models.PutStandingInstructionsStandingInstructionIdResponse>())

    return _converter.suspendRequest<org.openapitools.client.models.PutStandingInstructionsStandingInstructionIdResponse,
        org.openapitools.client.models.PutStandingInstructionsStandingInstructionIdResponse>(_typeData,_ext)!!
  }
}

public fun Ktorfit.createStandingInstructionsApi(): StandingInstructionsApi =
    this.create(_StandingInstructionsApiImpl().apply { _converter=
    KtorfitConverterHelper(this@createStandingInstructionsApi) })
