// Generated by Ktorfit
@file:Suppress("warnings")

package org.openapitools.client.apis

import de.jensklingenberg.ktorfit.Ktorfit
import de.jensklingenberg.ktorfit.`internal`.InternalKtorfitApi
import de.jensklingenberg.ktorfit.`internal`.KtorfitConverterHelper
import de.jensklingenberg.ktorfit.`internal`.KtorfitInterface
import de.jensklingenberg.ktorfit.`internal`.TypeData
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.headers
import io.ktor.client.request.parameter
import io.ktor.client.request.setBody
import io.ktor.http.HttpMethod
import io.ktor.http.URLBuilder
import io.ktor.http.decodeURLQueryComponent
import io.ktor.http.encodeURLPath
import io.ktor.http.takeFrom
import io.ktor.util.reflect.typeInfo
import kotlin.OptIn
import kotlin.Suppress
import org.openapitools.client.models.GetCurrenciesResponse
import org.openapitools.client.models.PutCurrenciesRequest
import org.openapitools.client.models.PutCurrenciesResponse

@OptIn(InternalKtorfitApi::class)
public class _CurrencyApiImpl : CurrencyApi, KtorfitInterface {
  override lateinit var _converter: KtorfitConverterHelper

  override suspend fun retrieveCurrencies(): GetCurrenciesResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_converter.baseUrl + "v1/currencies")
        } 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "org.openapitools.client.models.GetCurrenciesResponse",
    typeInfo = typeInfo<org.openapitools.client.models.GetCurrenciesResponse>())

    return _converter.suspendRequest<org.openapitools.client.models.GetCurrenciesResponse,
        org.openapitools.client.models.GetCurrenciesResponse>(_typeData,_ext)!!
  }

  override suspend fun updateCurrencies(putCurrenciesRequest: PutCurrenciesRequest):
      PutCurrenciesResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("PUT")
        url{
        takeFrom(_converter.baseUrl + "v1/currencies")
        }
        setBody(putCurrenciesRequest) 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "org.openapitools.client.models.PutCurrenciesResponse",
    typeInfo = typeInfo<org.openapitools.client.models.PutCurrenciesResponse>())

    return _converter.suspendRequest<org.openapitools.client.models.PutCurrenciesResponse,
        org.openapitools.client.models.PutCurrenciesResponse>(_typeData,_ext)!!
  }
}

public fun Ktorfit.createCurrencyApi(): CurrencyApi = this.create(_CurrencyApiImpl().apply {
    _converter= KtorfitConverterHelper(this@createCurrencyApi) })
