// Generated by Ktorfit
@file:Suppress("warnings")

package org.openapitools.client.apis

import de.jensklingenberg.ktorfit.Ktorfit
import de.jensklingenberg.ktorfit.`internal`.InternalKtorfitApi
import de.jensklingenberg.ktorfit.`internal`.KtorfitConverterHelper
import de.jensklingenberg.ktorfit.`internal`.KtorfitInterface
import de.jensklingenberg.ktorfit.`internal`.TypeData
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.headers
import io.ktor.client.request.parameter
import io.ktor.client.request.setBody
import io.ktor.http.HttpMethod
import io.ktor.http.URLBuilder
import io.ktor.http.decodeURLQueryComponent
import io.ktor.http.encodeURLPath
import io.ktor.http.takeFrom
import io.ktor.util.reflect.typeInfo
import kotlin.OptIn
import kotlin.Suppress
import org.openapitools.client.models.PageClientSearchData
import org.openapitools.client.models.PagedRequestClientTextSearch

@OptIn(InternalKtorfitApi::class)
public class _ClientSearchV2ApiImpl : ClientSearchV2Api, KtorfitInterface {
  override lateinit var _converter: KtorfitConverterHelper

  override suspend fun searchByText(pagedRequestClientTextSearch: PagedRequestClientTextSearch?):
      PageClientSearchData {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_converter.baseUrl + "v2/clients/search")
        }
        setBody(pagedRequestClientTextSearch) 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "org.openapitools.client.models.PageClientSearchData",
    typeInfo = typeInfo<org.openapitools.client.models.PageClientSearchData>())

    return _converter.suspendRequest<org.openapitools.client.models.PageClientSearchData,
        org.openapitools.client.models.PageClientSearchData>(_typeData,_ext)!!
  }
}

public fun Ktorfit.createClientSearchV2Api(): ClientSearchV2Api =
    this.create(_ClientSearchV2ApiImpl().apply { _converter=
    KtorfitConverterHelper(this@createClientSearchV2Api) })
