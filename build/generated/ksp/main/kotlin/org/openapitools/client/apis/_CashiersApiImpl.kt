// Generated by Ktorfit
@file:Suppress("warnings")

package org.openapitools.client.apis

import de.jensklingenberg.ktorfit.Ktorfit
import de.jensklingenberg.ktorfit.`internal`.InternalKtorfitApi
import de.jensklingenberg.ktorfit.`internal`.KtorfitConverterHelper
import de.jensklingenberg.ktorfit.`internal`.KtorfitInterface
import de.jensklingenberg.ktorfit.`internal`.TypeData
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.headers
import io.ktor.client.request.parameter
import io.ktor.client.request.setBody
import io.ktor.http.HttpMethod
import io.ktor.http.URLBuilder
import io.ktor.http.decodeURLQueryComponent
import io.ktor.http.encodeURLPath
import io.ktor.http.takeFrom
import io.ktor.util.reflect.typeInfo
import kotlin.Long
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress

@OptIn(InternalKtorfitApi::class)
public class _CashiersApiImpl : CashiersApi, KtorfitInterface {
  override lateinit var _converter: KtorfitConverterHelper

  override suspend fun getCashierData(
    officeId: Long?,
    tellerId: Long?,
    staffId: Long?,
    date: String?,
  ): String {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_converter.baseUrl + "v1/cashiers")
        officeId?.let{ parameter("officeId", "$it") }
        tellerId?.let{ parameter("tellerId", "$it") }
        staffId?.let{ parameter("staffId", "$it") }
        date?.let{ parameter("date", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "kotlin.String",
    typeInfo = typeInfo<kotlin.String>())

    return _converter.suspendRequest<kotlin.String, kotlin.String>(_typeData,_ext)!!
  }
}

public fun Ktorfit.createCashiersApi(): CashiersApi = this.create(_CashiersApiImpl().apply {
    _converter= KtorfitConverterHelper(this@createCashiersApi) })
