// Generated by Ktorfit
@file:Suppress("warnings")

package org.openapitools.client.apis

import de.jensklingenberg.ktorfit.Ktorfit
import de.jensklingenberg.ktorfit.`internal`.InternalKtorfitApi
import de.jensklingenberg.ktorfit.`internal`.KtorfitConverterHelper
import de.jensklingenberg.ktorfit.`internal`.KtorfitInterface
import de.jensklingenberg.ktorfit.`internal`.TypeData
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.forms.FormDataContent
import io.ktor.client.request.forms.MultiPartFormDataContent
import io.ktor.client.request.forms.formData
import io.ktor.client.request.headers
import io.ktor.client.request.parameter
import io.ktor.client.request.setBody
import io.ktor.http.HttpMethod
import io.ktor.http.Parameters
import io.ktor.http.URLBuilder
import io.ktor.http.decodeURLQueryComponent
import io.ktor.http.encodeURLPath
import io.ktor.http.takeFrom
import io.ktor.util.reflect.typeInfo
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.OptIn
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import okhttp3.MultipartBody
import org.openapitools.client.models.DeleteLoansLoanIdResponse
import org.openapitools.client.models.GetDelinquencyActionsResponse
import org.openapitools.client.models.GetDelinquencyTagHistoryResponse
import org.openapitools.client.models.GetLoansApprovalTemplateResponse
import org.openapitools.client.models.GetLoansLoanIdResponse
import org.openapitools.client.models.GetLoansResponse
import org.openapitools.client.models.GetLoansTemplateResponse
import org.openapitools.client.models.PostLoansDelinquencyActionRequest
import org.openapitools.client.models.PostLoansDelinquencyActionResponse
import org.openapitools.client.models.PostLoansLoanIdRequest
import org.openapitools.client.models.PostLoansLoanIdResponse
import org.openapitools.client.models.PostLoansRequest
import org.openapitools.client.models.PostLoansResponse
import org.openapitools.client.models.PutLoansLoanIdRequest
import org.openapitools.client.models.PutLoansLoanIdResponse

@OptIn(InternalKtorfitApi::class)
public class _LoansApiImpl : LoansApi, KtorfitInterface {
  override lateinit var _converter: KtorfitConverterHelper

  override suspend
      fun calculateLoanScheduleOrSubmitLoanApplication(postLoansRequest: PostLoansRequest,
      command: String?): PostLoansResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_converter.baseUrl + "v1/loans")
        command?.let{ parameter("command", "$it") }
        }
        setBody(postLoansRequest) 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "org.openapitools.client.models.PostLoansResponse",
    typeInfo = typeInfo<org.openapitools.client.models.PostLoansResponse>())

    return _converter.suspendRequest<org.openapitools.client.models.PostLoansResponse,
        org.openapitools.client.models.PostLoansResponse>(_typeData,_ext)!!
  }

  override suspend fun createLoanDelinquencyAction(loanId: Long,
      postLoansDelinquencyActionRequest: PostLoansDelinquencyActionRequest):
      PostLoansDelinquencyActionResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_converter.baseUrl + "v1/loans/${"$loanId".encodeURLPath()}/delinquency-actions")
        }
        setBody(postLoansDelinquencyActionRequest) 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "org.openapitools.client.models.PostLoansDelinquencyActionResponse",
    typeInfo = typeInfo<org.openapitools.client.models.PostLoansDelinquencyActionResponse>())

    return _converter.suspendRequest<org.openapitools.client.models.PostLoansDelinquencyActionResponse,
        org.openapitools.client.models.PostLoansDelinquencyActionResponse>(_typeData,_ext)!!
  }

  override suspend fun createLoanDelinquencyAction1(loanExternalId: String,
      postLoansDelinquencyActionRequest: PostLoansDelinquencyActionRequest):
      PostLoansDelinquencyActionResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_converter.baseUrl +
            "v1/loans/external-id/${"$loanExternalId".encodeURLPath()}/delinquency-actions")
        }
        setBody(postLoansDelinquencyActionRequest) 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "org.openapitools.client.models.PostLoansDelinquencyActionResponse",
    typeInfo = typeInfo<org.openapitools.client.models.PostLoansDelinquencyActionResponse>())

    return _converter.suspendRequest<org.openapitools.client.models.PostLoansDelinquencyActionResponse,
        org.openapitools.client.models.PostLoansDelinquencyActionResponse>(_typeData,_ext)!!
  }

  override suspend fun deleteLoanApplication(loanId: Long): DeleteLoansLoanIdResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("DELETE")
        url{
        takeFrom(_converter.baseUrl + "v1/loans/${"$loanId".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "org.openapitools.client.models.DeleteLoansLoanIdResponse",
    typeInfo = typeInfo<org.openapitools.client.models.DeleteLoansLoanIdResponse>())

    return _converter.suspendRequest<org.openapitools.client.models.DeleteLoansLoanIdResponse,
        org.openapitools.client.models.DeleteLoansLoanIdResponse>(_typeData,_ext)!!
  }

  override suspend fun deleteLoanApplication1(loanExternalId: String): DeleteLoansLoanIdResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("DELETE")
        url{
        takeFrom(_converter.baseUrl + "v1/loans/external-id/${"$loanExternalId".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "org.openapitools.client.models.DeleteLoansLoanIdResponse",
    typeInfo = typeInfo<org.openapitools.client.models.DeleteLoansLoanIdResponse>())

    return _converter.suspendRequest<org.openapitools.client.models.DeleteLoansLoanIdResponse,
        org.openapitools.client.models.DeleteLoansLoanIdResponse>(_typeData,_ext)!!
  }

  override suspend fun getDelinquencyTagHistory(loanId: Long):
      List<GetDelinquencyTagHistoryResponse> {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_converter.baseUrl + "v1/loans/${"$loanId".encodeURLPath()}/delinquencytags")
        } 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename =
        "kotlin.collections.List<org.openapitools.client.models.GetDelinquencyTagHistoryResponse>",
    typeInfo =
        typeInfo<kotlin.collections.List<org.openapitools.client.models.GetDelinquencyTagHistoryResponse>>())

    return _converter.suspendRequest<kotlin.collections.List<org.openapitools.client.models.GetDelinquencyTagHistoryResponse>,
        org.openapitools.client.models.GetDelinquencyTagHistoryResponse>(_typeData,_ext)!!
  }

  override suspend fun getDelinquencyTagHistory1(loanExternalId: String):
      List<GetDelinquencyTagHistoryResponse> {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_converter.baseUrl +
            "v1/loans/external-id/${"$loanExternalId".encodeURLPath()}/delinquencytags")
        } 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename =
        "kotlin.collections.List<org.openapitools.client.models.GetDelinquencyTagHistoryResponse>",
    typeInfo =
        typeInfo<kotlin.collections.List<org.openapitools.client.models.GetDelinquencyTagHistoryResponse>>())

    return _converter.suspendRequest<kotlin.collections.List<org.openapitools.client.models.GetDelinquencyTagHistoryResponse>,
        org.openapitools.client.models.GetDelinquencyTagHistoryResponse>(_typeData,_ext)!!
  }

  override suspend fun getGlimRepaymentTemplate(glimId: Long): String {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_converter.baseUrl + "v1/loans/glimAccount/${"$glimId".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "kotlin.String",
    typeInfo = typeInfo<kotlin.String>())

    return _converter.suspendRequest<kotlin.String, kotlin.String>(_typeData,_ext)!!
  }

  override suspend fun getLoanDelinquencyActions(loanId: Long):
      List<GetDelinquencyActionsResponse> {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_converter.baseUrl + "v1/loans/${"$loanId".encodeURLPath()}/delinquency-actions")
        } 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename =
        "kotlin.collections.List<org.openapitools.client.models.GetDelinquencyActionsResponse>",
    typeInfo =
        typeInfo<kotlin.collections.List<org.openapitools.client.models.GetDelinquencyActionsResponse>>())

    return _converter.suspendRequest<kotlin.collections.List<org.openapitools.client.models.GetDelinquencyActionsResponse>,
        org.openapitools.client.models.GetDelinquencyActionsResponse>(_typeData,_ext)!!
  }

  override suspend fun getLoanDelinquencyActions1(loanExternalId: String):
      List<GetDelinquencyActionsResponse> {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_converter.baseUrl +
            "v1/loans/external-id/${"$loanExternalId".encodeURLPath()}/delinquency-actions")
        } 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename =
        "kotlin.collections.List<org.openapitools.client.models.GetDelinquencyActionsResponse>",
    typeInfo =
        typeInfo<kotlin.collections.List<org.openapitools.client.models.GetDelinquencyActionsResponse>>())

    return _converter.suspendRequest<kotlin.collections.List<org.openapitools.client.models.GetDelinquencyActionsResponse>,
        org.openapitools.client.models.GetDelinquencyActionsResponse>(_typeData,_ext)!!
  }

  override suspend fun getLoanRepaymentTemplate(officeId: Long?, dateFormat: String?) {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_converter.baseUrl + "v1/loans/repayments/downloadtemplate")
        officeId?.let{ parameter("officeId", "$it") }
        dateFormat?.let{ parameter("dateFormat", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "kotlin.Unit",
    typeInfo = typeInfo<kotlin.Unit>())

    return _converter.suspendRequest<kotlin.Unit, kotlin.Unit>(_typeData,_ext)!!
  }

  override suspend fun getLoansTemplate(
    officeId: Long?,
    staffId: Long?,
    dateFormat: String?,
  ) {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_converter.baseUrl + "v1/loans/downloadtemplate")
        officeId?.let{ parameter("officeId", "$it") }
        staffId?.let{ parameter("staffId", "$it") }
        dateFormat?.let{ parameter("dateFormat", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "kotlin.Unit",
    typeInfo = typeInfo<kotlin.Unit>())

    return _converter.suspendRequest<kotlin.Unit, kotlin.Unit>(_typeData,_ext)!!
  }

  override suspend fun glimStateTransitions(
    glimId: Long,
    postLoansLoanIdRequest: PostLoansLoanIdRequest,
    command: String?,
  ): PostLoansLoanIdResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_converter.baseUrl + "v1/loans/glimAccount/${"$glimId".encodeURLPath()}")
        command?.let{ parameter("command", "$it") }
        }
        setBody(postLoansLoanIdRequest) 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "org.openapitools.client.models.PostLoansLoanIdResponse",
    typeInfo = typeInfo<org.openapitools.client.models.PostLoansLoanIdResponse>())

    return _converter.suspendRequest<org.openapitools.client.models.PostLoansLoanIdResponse,
        org.openapitools.client.models.PostLoansLoanIdResponse>(_typeData,_ext)!!
  }

  override suspend fun modifyLoanApplication(
    loanId: Long,
    putLoansLoanIdRequest: PutLoansLoanIdRequest,
    command: String?,
  ): PutLoansLoanIdResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("PUT")
        url{
        takeFrom(_converter.baseUrl + "v1/loans/${"$loanId".encodeURLPath()}")
        command?.let{ parameter("command", "$it") }
        }
        setBody(putLoansLoanIdRequest) 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "org.openapitools.client.models.PutLoansLoanIdResponse",
    typeInfo = typeInfo<org.openapitools.client.models.PutLoansLoanIdResponse>())

    return _converter.suspendRequest<org.openapitools.client.models.PutLoansLoanIdResponse,
        org.openapitools.client.models.PutLoansLoanIdResponse>(_typeData,_ext)!!
  }

  override suspend fun modifyLoanApplication1(
    loanExternalId: String,
    putLoansLoanIdRequest: PutLoansLoanIdRequest,
    command: String?,
  ): PutLoansLoanIdResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("PUT")
        url{
        takeFrom(_converter.baseUrl + "v1/loans/external-id/${"$loanExternalId".encodeURLPath()}")
        command?.let{ parameter("command", "$it") }
        }
        setBody(putLoansLoanIdRequest) 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "org.openapitools.client.models.PutLoansLoanIdResponse",
    typeInfo = typeInfo<org.openapitools.client.models.PutLoansLoanIdResponse>())

    return _converter.suspendRequest<org.openapitools.client.models.PutLoansLoanIdResponse,
        org.openapitools.client.models.PutLoansLoanIdResponse>(_typeData,_ext)!!
  }

  override suspend fun postLoanRepaymentTemplate(
    dateFormat: String?,
    locale: String?,
    uploadedInputStream: MultipartBody.Part?,
  ): String {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_converter.baseUrl + "v1/loans/repayments/uploadtemplate")
        }
        val __formData = formData {
        dateFormat?.let{ append("dateFormat", "${it}") }
        locale?.let{ append("locale", "${it}") }
        uploadedInputStream?.let{ append("", "${it}") }
        }
        setBody(MultiPartFormDataContent(__formData))
         
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "kotlin.String",
    typeInfo = typeInfo<kotlin.String>())

    return _converter.suspendRequest<kotlin.String, kotlin.String>(_typeData,_ext)!!
  }

  override suspend fun postLoanTemplate(
    dateFormat: String?,
    locale: String?,
    uploadedInputStream: MultipartBody.Part?,
  ): String {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_converter.baseUrl + "v1/loans/uploadtemplate")
        }
        val __formData = formData {
        dateFormat?.let{ append("dateFormat", "${it}") }
        locale?.let{ append("locale", "${it}") }
        uploadedInputStream?.let{ append("", "${it}") }
        }
        setBody(MultiPartFormDataContent(__formData))
         
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "kotlin.String",
    typeInfo = typeInfo<kotlin.String>())

    return _converter.suspendRequest<kotlin.String, kotlin.String>(_typeData,_ext)!!
  }

  override suspend fun retrieveAll27(
    externalId: String?,
    offset: Int?,
    limit: Int?,
    orderBy: String?,
    sortOrder: String?,
    accountNo: String?,
    status: String?,
  ): GetLoansResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_converter.baseUrl + "v1/loans")
        externalId?.let{ parameter("externalId", "$it") }
        offset?.let{ parameter("offset", "$it") }
        limit?.let{ parameter("limit", "$it") }
        orderBy?.let{ parameter("orderBy", "$it") }
        sortOrder?.let{ parameter("sortOrder", "$it") }
        accountNo?.let{ parameter("accountNo", "$it") }
        status?.let{ parameter("status", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "org.openapitools.client.models.GetLoansResponse",
    typeInfo = typeInfo<org.openapitools.client.models.GetLoansResponse>())

    return _converter.suspendRequest<org.openapitools.client.models.GetLoansResponse,
        org.openapitools.client.models.GetLoansResponse>(_typeData,_ext)!!
  }

  override suspend fun retrieveApprovalTemplate(loanId: Long, templateType: String?):
      GetLoansApprovalTemplateResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_converter.baseUrl + "v1/loans/${"$loanId".encodeURLPath()}/template")
        templateType?.let{ parameter("templateType", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "org.openapitools.client.models.GetLoansApprovalTemplateResponse",
    typeInfo = typeInfo<org.openapitools.client.models.GetLoansApprovalTemplateResponse>())

    return _converter.suspendRequest<org.openapitools.client.models.GetLoansApprovalTemplateResponse,
        org.openapitools.client.models.GetLoansApprovalTemplateResponse>(_typeData,_ext)!!
  }

  override suspend fun retrieveApprovalTemplate1(loanExternalId: String, templateType: String?):
      GetLoansApprovalTemplateResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_converter.baseUrl +
            "v1/loans/external-id/${"$loanExternalId".encodeURLPath()}/template")
        templateType?.let{ parameter("templateType", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "org.openapitools.client.models.GetLoansApprovalTemplateResponse",
    typeInfo = typeInfo<org.openapitools.client.models.GetLoansApprovalTemplateResponse>())

    return _converter.suspendRequest<org.openapitools.client.models.GetLoansApprovalTemplateResponse,
        org.openapitools.client.models.GetLoansApprovalTemplateResponse>(_typeData,_ext)!!
  }

  override suspend fun retrieveLoan(
    loanId: Long,
    staffInSelectedOfficeOnly: Boolean?,
    associations: String?,
    exclude: String?,
    fields: String?,
  ): GetLoansLoanIdResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_converter.baseUrl + "v1/loans/${"$loanId".encodeURLPath()}")
        staffInSelectedOfficeOnly?.let{ parameter("staffInSelectedOfficeOnly", "$it") }
        associations?.let{ parameter("associations", "$it") }
        exclude?.let{ parameter("exclude", "$it") }
        fields?.let{ parameter("fields", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "org.openapitools.client.models.GetLoansLoanIdResponse",
    typeInfo = typeInfo<org.openapitools.client.models.GetLoansLoanIdResponse>())

    return _converter.suspendRequest<org.openapitools.client.models.GetLoansLoanIdResponse,
        org.openapitools.client.models.GetLoansLoanIdResponse>(_typeData,_ext)!!
  }

  override suspend fun retrieveLoan1(
    loanExternalId: String,
    staffInSelectedOfficeOnly: Boolean?,
    associations: String?,
    exclude: String?,
    fields: String?,
  ): GetLoansLoanIdResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_converter.baseUrl + "v1/loans/external-id/${"$loanExternalId".encodeURLPath()}")
        staffInSelectedOfficeOnly?.let{ parameter("staffInSelectedOfficeOnly", "$it") }
        associations?.let{ parameter("associations", "$it") }
        exclude?.let{ parameter("exclude", "$it") }
        fields?.let{ parameter("fields", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "org.openapitools.client.models.GetLoansLoanIdResponse",
    typeInfo = typeInfo<org.openapitools.client.models.GetLoansLoanIdResponse>())

    return _converter.suspendRequest<org.openapitools.client.models.GetLoansLoanIdResponse,
        org.openapitools.client.models.GetLoansLoanIdResponse>(_typeData,_ext)!!
  }

  override suspend fun stateTransitions(
    loanId: Long,
    postLoansLoanIdRequest: PostLoansLoanIdRequest,
    command: String?,
  ): PostLoansLoanIdResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_converter.baseUrl + "v1/loans/${"$loanId".encodeURLPath()}")
        command?.let{ parameter("command", "$it") }
        }
        setBody(postLoansLoanIdRequest) 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "org.openapitools.client.models.PostLoansLoanIdResponse",
    typeInfo = typeInfo<org.openapitools.client.models.PostLoansLoanIdResponse>())

    return _converter.suspendRequest<org.openapitools.client.models.PostLoansLoanIdResponse,
        org.openapitools.client.models.PostLoansLoanIdResponse>(_typeData,_ext)!!
  }

  override suspend fun stateTransitions1(
    loanExternalId: String,
    postLoansLoanIdRequest: PostLoansLoanIdRequest,
    command: String?,
  ): PostLoansLoanIdResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_converter.baseUrl + "v1/loans/external-id/${"$loanExternalId".encodeURLPath()}")
        command?.let{ parameter("command", "$it") }
        }
        setBody(postLoansLoanIdRequest) 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "org.openapitools.client.models.PostLoansLoanIdResponse",
    typeInfo = typeInfo<org.openapitools.client.models.PostLoansLoanIdResponse>())

    return _converter.suspendRequest<org.openapitools.client.models.PostLoansLoanIdResponse,
        org.openapitools.client.models.PostLoansLoanIdResponse>(_typeData,_ext)!!
  }

  override suspend fun template10(
    clientId: Long?,
    groupId: Long?,
    productId: Long?,
    templateType: String?,
    staffInSelectedOfficeOnly: Boolean?,
    activeOnly: Boolean?,
  ): GetLoansTemplateResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_converter.baseUrl + "v1/loans/template")
        clientId?.let{ parameter("clientId", "$it") }
        groupId?.let{ parameter("groupId", "$it") }
        productId?.let{ parameter("productId", "$it") }
        templateType?.let{ parameter("templateType", "$it") }
        staffInSelectedOfficeOnly?.let{ parameter("staffInSelectedOfficeOnly", "$it") }
        activeOnly?.let{ parameter("activeOnly", "$it") }
        } 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "org.openapitools.client.models.GetLoansTemplateResponse",
    typeInfo = typeInfo<org.openapitools.client.models.GetLoansTemplateResponse>())

    return _converter.suspendRequest<org.openapitools.client.models.GetLoansTemplateResponse,
        org.openapitools.client.models.GetLoansTemplateResponse>(_typeData,_ext)!!
  }
}

public fun Ktorfit.createLoansApi(): LoansApi = this.create(_LoansApiImpl().apply { _converter=
    KtorfitConverterHelper(this@createLoansApi) })
