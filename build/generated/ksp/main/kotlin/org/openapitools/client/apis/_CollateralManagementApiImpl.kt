// Generated by Ktorfit
@file:Suppress("warnings")

package org.openapitools.client.apis

import de.jensklingenberg.ktorfit.Ktorfit
import de.jensklingenberg.ktorfit.`internal`.InternalKtorfitApi
import de.jensklingenberg.ktorfit.`internal`.KtorfitConverterHelper
import de.jensklingenberg.ktorfit.`internal`.KtorfitInterface
import de.jensklingenberg.ktorfit.`internal`.TypeData
import io.ktor.client.request.HttpRequestBuilder
import io.ktor.client.request.headers
import io.ktor.client.request.parameter
import io.ktor.client.request.setBody
import io.ktor.http.HttpMethod
import io.ktor.http.URLBuilder
import io.ktor.http.decodeURLQueryComponent
import io.ktor.http.encodeURLPath
import io.ktor.http.takeFrom
import io.ktor.util.reflect.typeInfo
import kotlin.Long
import kotlin.OptIn
import kotlin.Suppress
import kotlin.collections.List
import org.openapitools.client.models.DeleteCollateralProductResponse
import org.openapitools.client.models.GetCollateralManagementsResponse
import org.openapitools.client.models.GetCollateralProductTemplate
import org.openapitools.client.models.PostCollateralManagementProductRequest
import org.openapitools.client.models.PostCollateralManagementProductResponse
import org.openapitools.client.models.PutCollateralProductRequest
import org.openapitools.client.models.PutCollateralProductResponse

@OptIn(InternalKtorfitApi::class)
public class _CollateralManagementApiImpl : CollateralManagementApi, KtorfitInterface {
  override lateinit var _converter: KtorfitConverterHelper

  override suspend
      fun createCollateral1(postCollateralManagementProductRequest: PostCollateralManagementProductRequest):
      PostCollateralManagementProductResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("POST")
        url{
        takeFrom(_converter.baseUrl + "v1/collateral-management")
        }
        setBody(postCollateralManagementProductRequest) 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "org.openapitools.client.models.PostCollateralManagementProductResponse",
    typeInfo = typeInfo<org.openapitools.client.models.PostCollateralManagementProductResponse>())

    return _converter.suspendRequest<org.openapitools.client.models.PostCollateralManagementProductResponse,
        org.openapitools.client.models.PostCollateralManagementProductResponse>(_typeData,_ext)!!
  }

  override suspend fun deleteCollateral2(collateralId: Long): DeleteCollateralProductResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("DELETE")
        url{
        takeFrom(_converter.baseUrl + "v1/collateral-management/${"$collateralId".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "org.openapitools.client.models.DeleteCollateralProductResponse",
    typeInfo = typeInfo<org.openapitools.client.models.DeleteCollateralProductResponse>())

    return _converter.suspendRequest<org.openapitools.client.models.DeleteCollateralProductResponse,
        org.openapitools.client.models.DeleteCollateralProductResponse>(_typeData,_ext)!!
  }

  override suspend fun getAllCollaterals(): List<GetCollateralManagementsResponse> {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_converter.baseUrl + "v1/collateral-management")
        } 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename =
        "kotlin.collections.List<org.openapitools.client.models.GetCollateralManagementsResponse>",
    typeInfo =
        typeInfo<kotlin.collections.List<org.openapitools.client.models.GetCollateralManagementsResponse>>())

    return _converter.suspendRequest<kotlin.collections.List<org.openapitools.client.models.GetCollateralManagementsResponse>,
        org.openapitools.client.models.GetCollateralManagementsResponse>(_typeData,_ext)!!
  }

  override suspend fun getCollateral(collateralId: Long): GetCollateralManagementsResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_converter.baseUrl + "v1/collateral-management/${"$collateralId".encodeURLPath()}")
        } 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "org.openapitools.client.models.GetCollateralManagementsResponse",
    typeInfo = typeInfo<org.openapitools.client.models.GetCollateralManagementsResponse>())

    return _converter.suspendRequest<org.openapitools.client.models.GetCollateralManagementsResponse,
        org.openapitools.client.models.GetCollateralManagementsResponse>(_typeData,_ext)!!
  }

  override suspend fun getCollateralTemplate(): List<GetCollateralProductTemplate> {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("GET")
        url{
        takeFrom(_converter.baseUrl + "v1/collateral-management/template")
        } 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename =
        "kotlin.collections.List<org.openapitools.client.models.GetCollateralProductTemplate>",
    typeInfo =
        typeInfo<kotlin.collections.List<org.openapitools.client.models.GetCollateralProductTemplate>>())

    return _converter.suspendRequest<kotlin.collections.List<org.openapitools.client.models.GetCollateralProductTemplate>,
        org.openapitools.client.models.GetCollateralProductTemplate>(_typeData,_ext)!!
  }

  override suspend fun updateCollateral2(collateralId: Long,
      putCollateralProductRequest: PutCollateralProductRequest): PutCollateralProductResponse {
    val _ext: HttpRequestBuilder.() -> Unit = {
        method = HttpMethod.parse("PUT")
        url{
        takeFrom(_converter.baseUrl + "v1/collateral-management/${"$collateralId".encodeURLPath()}")
        }
        setBody(putCollateralProductRequest) 
        }
    val _typeData = TypeData.createTypeData(
    qualifiedTypename = "org.openapitools.client.models.PutCollateralProductResponse",
    typeInfo = typeInfo<org.openapitools.client.models.PutCollateralProductResponse>())

    return _converter.suspendRequest<org.openapitools.client.models.PutCollateralProductResponse,
        org.openapitools.client.models.PutCollateralProductResponse>(_typeData,_ext)!!
  }
}

public fun Ktorfit.createCollateralManagementApi(): CollateralManagementApi =
    this.create(_CollateralManagementApiImpl().apply { _converter=
    KtorfitConverterHelper(this@createCollateralManagementApi) })
